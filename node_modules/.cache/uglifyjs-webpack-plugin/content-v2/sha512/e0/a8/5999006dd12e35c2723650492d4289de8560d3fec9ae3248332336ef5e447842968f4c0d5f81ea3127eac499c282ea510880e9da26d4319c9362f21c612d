{"code":"!function(t){var o={};function e(n){if(o[n])return o[n].exports;var i=o[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=o,e.d=function(t,o,n){e.o(t,o)||Object.defineProperty(t,o,{configurable:!1,enumerable:!0,get:n})},e.r=function(t){Object.defineProperty(t,\"__esModule\",{value:!0})},e.n=function(t){var o=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(o,\"a\",o),o},e.o=function(t,o){return Object.prototype.hasOwnProperty.call(t,o)},e.p=\"\",e(e.s=1)}([function(t,o){const e=(t,o)=>t*o;const n=t=>parseFloat(t)/100,i=function(t,o,e){let n=function(t){let o=[];for(let e in t)o.push(e);return o}(t.coins),i=o.toLowerCase();if(!(n.indexOf(`${i}`)>-1))throw`The coin of type '${i}' does not exist. Please use one of the following: ${n}`;\"function\"==typeof e&&e(t,i)};function r(t,o,e){let n=Math.floor(e/o);return 0==n?{remaining:e,coinsSubtracted:0}:{remaining:e-=n*o,coinsSubtracted:n}}let s={coins:{penny:{amount:0,worth:1},nickel:{amount:0,worth:5},dime:{amount:0,worth:10},quarter:{amount:0,worth:25},pound:{amount:0,worth:100}},setCoin:function(t,o){i(this,t,function(t,e){t.coins[e].amount=o})},subtractByCoin:function(t,o){this.coins[t].amount-=o},getAmountByCoin:function(t){let o;return i(this,t,function(t,e){o=t.coins[e].amount}),o},getCalculatedByCoin:function(t){let o=0;return i(this,t,function(t,n){o=e(t.coins[n].amount,t.coins[n].worth)}),o},getTotalRegisterAmount:function(t){let o=0;for(let t in this.coins)o+=this.getCalculatedByCoin(t);if(\"pounds\"==t){return n(o)}return o},removeFromCashregister:function(t,o=\"cents\"){if(\"pounds\"==o&&(t=(t=>100*parseFloat(t))(t)),this.getTotalRegisterAmount()<t)return\"Can't return money since there isn't a sufficient amount in the register.\";console.log(`Log: Going to subtract from the register: ${n(t)} (${t} cents)`);let i=t,s=function(t){let o=[];for(let e in t)o.push([e],t[e]);return o.sort((t,o)=>o[1]-t[1]),o.reverse(),o=function(t){let o=[];for(let e=0;e<t.length;e+=2)o[t[e+1][0]]=t[e];return o}(o)}(this.coins),u=0;for(let t in s){let o=r(s[t].amount,s[t].worth,i);i=o.remaining,this.subtractByCoin(t,o.coinsSubtracted),l=[t],a=o.coinsSubtracted,c=s[t].worth,g=e(o.coinsSubtracted,s[t].worth),console.log(`Log: Coins of type '${l}' substracted: '${a}' of worth '${c}', for a total of '${g}'.`),u+=o.coinsSubtracted*s[t].worth}var l,a,c,g}};s.setCoin(\"penny\",\"12\"),s.setCoin(\"nickel\",\"10\"),s.setCoin(\"dime\",\"2\"),s.setCoin(\"quarter\",\"12\"),s.setCoin(\"pound\",\"30\"),console.dir(`Total directly using the object property Cashregister.coins.penny.amount: ${s.coins.penny.amount}`),console.log(\"---\"),console.log(\"Subtotal amounts before subtraction:\"),console.log(`Total of Pounds using the getter Cashregister.getAmountByCoin('pound'): ${s.getAmountByCoin(\"pound\")}`),console.log(`Total of Nickels using the getter Cashregister.getAmountByCoin('nickel'): ${s.getAmountByCoin(\"nickel\")}`),console.log(`Total of Dimes using the getter Cashregister.getAmountByCoin('dime'): ${s.getAmountByCoin(\"dime\")}`),console.log(`Total of Quaters using the getter Cashregister.getAmountByCoin('quarter'): ${s.getAmountByCoin(\"quarter\")}`),console.log(`Total of Pennies using the getter Cashregister.getAmountByCoin('Penny'): ${s.getAmountByCoin(\"Penny\")}`),console.log(\"---\"),console.log(\"Subtotal amount in cents by coin before subtraction:\"),console.log(`Total of Pounds in cents using the getter Cashregister.getCalculatedByCoin('pound'): ${s.getCalculatedByCoin(\"pound\")}`),console.log(`Total of Nickels in cents using the getter Cashregister.getCalculatedByCoin('nickel'): ${s.getCalculatedByCoin(\"nickel\")}`),console.log(`Total of Dimes in cents using the getter Cashregister.getCalculatedByCoin('dime'): ${s.getCalculatedByCoin(\"dime\")}`),console.log(`Total of Quarters in cents using the getter Cashregister.getCalculatedByCoin('quarter'): ${s.getCalculatedByCoin(\"quarter\")}`),console.log(`Total of Pennies in cents using the getter Cashregister.getCalculatedByCoin('Penny'): ${s.getCalculatedByCoin(\"Penny\")}`),console.log(\"---\"),console.log(\"Total amounts before subtraction:\"),console.log(`Total amount in cents: ${s.getTotalRegisterAmount()}`),console.log(`Total amount in pounds: ${s.getTotalRegisterAmount(\"pounds\")}`),console.log(\"---\"),s.removeFromCashregister(\"20.47\",\"pounds\"),console.log(\"---\"),console.log(`Remaining in the register: ${s.getTotalRegisterAmount(\"pounds\")}`),console.log(\"Subtotal amounts AFTER subtraction:\"),console.log(`Total of Pounds using the getter Cashregister.getAmountByCoin('pound'): ${s.getAmountByCoin(\"pound\")}`),console.log(`Total of Nickels using the getter Cashregister.getAmountByCoin('nickel'): ${s.getAmountByCoin(\"nickel\")}`),console.log(`Total of Dimes using the getter Cashregister.getAmountByCoin('dime'): ${s.getAmountByCoin(\"dime\")}`),console.log(`Total of Quaters using the getter Cashregister.getAmountByCoin('quarter'): ${s.getAmountByCoin(\"quarter\")}`),console.log(`Total of Pennies using the getter Cashregister.getAmountByCoin('Penny'): ${s.getAmountByCoin(\"Penny\")}`)},function(t,o,e){e(0),function(){var t=new Error('Cannot find module \"mode\"');throw t.code=\"MODULE_NOT_FOUND\",t}(),function(){var t=new Error('Cannot find module \"development\"');throw t.code=\"MODULE_NOT_FOUND\",t}()}]);","extractedComments":[]}